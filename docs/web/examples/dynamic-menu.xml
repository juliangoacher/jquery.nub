<?xml version="1.0" encoding="iso-8859-1"?>
<html>
    <head>
        <script src="jquery.nub-frames.js"/>
        <script>
             $(document).ready(function() {
                $('#simple-dynamic-menu').nubDynamicMenu();

                $('#pkgs-dynamic-menu').nubDynamicMenu({
                    'frame' : {
                        'contentKeyRef' : '/data/contentKeyRef',
                        'makeLayoutURI' : function(key){
                            return key + '/main.html';
                        },
                        'makeSetupURI' : function(key){
                            return key + '/setup.js';
                        }
                    }
                });
                
             });
        </script>

    </head>
<body>

    <h2>DynamicMenu</h2>
    <p>
        A <b>DynamicMenu</b> is a powerfull menu type that can be attached to a list element to allow menu 
        navigation between sections in a web page. DynamicMenu performs dynamic load of frame content based
        on menu selection. A DynamicMenu make uses of nub DynamicMenu and on the same way it will load two
        files when a section is selected. The first is the <i>layout file</i> which describes the HTML content
        to be displayed into the frame. The second file is the <i>setup file</i> that contains JavaScript code to
        be executed on the layout.
     </p>
    <p>
        A DynamicMenu is initialized with the following options:
        <ul>
            <li>
                <b>Frame</b>: The optional frame configuration. Default values will be used if not frame
                configuration is provided. 
                <p>
                <ul>
                    <li><b>keyRef</b>: The content key reference path. i.e. where in the model to find the
                        content key value. This is an optional paremeter and the default keyRef value is :
                        '/data/' + elementID .
                    </li>
                    <li><b>makeLayoutURI</b> : A function to generate the URI of the layout file from
                        the content key. The menu will load the HTML in the layout using an AJAX call.
                        This is an optional parameter and the default value is the menu element with the
                        '.html' extension appended.
                    </li>
                    <li><b>makeSetupURI</b>: A function to generate the URI of a javaScript setup file from
                        the content key. The code will be executed once the layout HTML has been loaded. This
                        is also optional parameter and the default value is the layout URL with '.setup.js'
                        appended. If the setup javaScript file doesn't exist then just the HTML layout is
                        loaded.
                    </li>
                </ul>
                </p>
            </li>
            <p>
            <li>
                <b>frameLookup</b> : Function to return an object with the correspondent frame element. This
                is an optional paremeter and by defaul the function returs the elementID  with '-frame'
                appended. e.x. if the elementID  is 'main' the frame elemement id must be  set to 'main-frame'.
            </li>
            </p>
        </ul>
        <!-->More examples about how to configure frames can be seen in the <b>DynamicFrame</b> section.<-->
    </p>
    <p>
        The simplest menu can be initialized with this code:
        <pre class="brush: js">
            $('#dynamic-menu').nubDynamicMenu();
        </pre>
    </p>
    <p>
        Then we have to create the html menu element and another element where we can attach the content to.
    </p>
    <p>
        <ul>
            <li>
                <b>Menu element: </b>An UL element with an ID attribute and a set of LI menu elements is suitable for a menu element.
                <ul>
                    <li>
                        We give an ID attribute to the UL element. This ID will be used by the
                        <code>frameLookup</code> function to look for a frame element.
                    </li>
                    <li>
                        We give an ID attribute to any one of the list elements to identify the menu sections. 
                        This id will be used to generate any one of the layout URIs - the id plus '.html' appended -
                        and also to generate the setup file URI - layoutURI with '.setup.js' appended -.
                    </li>
                </ul>
            </li>
            <li>
                <b>Frame element: </b>A DIV element is suitable for the frame element. By default the ID of the frame element has to match
                the UL element ID with the '-frame' attached at the end. 
            </li>
        </ul>
    </p>
    <p>
        <pre class="brush: xml">
            <![CDATA[
                 <ul id="dynamic-menu" >
                    <li id="main">Main</li>
                    <li id="settings">Settings</li>
                    <li id="logout">Logout</li>
                </ul>
                <div id="dynamic-menu-frame" />
            ]]>
        </pre>
    </p>
    <p>
        Any one of the element in the UL represent a menu section browsable with a user click. For example if
        a click on 'main' the contents of 'main.html' are loaded in the frame, once the html is loaded the file
        'main.setup.js' is executed.
    </p>
    <p>
        We can use any one of the sections to load html code, run javaScript code or both.
        In this example our menu has three sections. The sections main and settings provide a layout file and
        a setup javascript file to be executed once the html has loaded. The layout section don't load any
        data and just executes javaScript code to logout from the application.
    </p>
    <p>
        The layout file for the main section is: <code> main.html</code>
         <pre class="brush: xml">
            <![CDATA[
                <div><b>MAIN SECTION DATA</b></div>
            ]]>
        </pre>
    </p>
    <p>
        And the setup file for the main section is: <code> main.setup.js</code>
        <pre class="brush: js">
            // Setup main section.
            alert("Running main.setup.js executed");
        </pre>
    </p>
    <p>When user clicks on Main section the content in the layout file are loaded in the frame element, once content
        is loaded the javaScript code is executed. The first time you click on the main section you will se that 
        the html file 'main.html' is loaded in the frame, and then you will see the alert dialog created in 'main.setup.js'
        file. This code it is just executed once and it can be used for section customizations. 
    </p>
  
    <!-- Example 1 : Simple configuration menu -->
    <p>
        Here there is a dynamic menu example. Click on a element in the list to load a section:
    </p>
    <p>
        <ul id="simple-dynamic-menu" >
            <li id="main">Main</li>
            <li id="settings">Settings</li>
            <li id="logout">Logout</li>
        </ul>
        <div id="simple-dynamic-menu-frame" >Frame element:</div>
    </p>

    <h3>Menu configurations examples:</h3>

    <h4>Setting up the frame lookup:</h4>
    <p>
        When user clicks on a secton the section content is loaded in the frame. A DIV element can be used
        as a frame. The <i>frameLookup</i> function can be used to configure the frame element
        lookup.
    </p>
    <p>
        Next code show how to setup the frameLookup:
        <pre class="brush: javascript">
        $('#dynamic-menu').nubDynamicMenu({
            'frameLookup' : function(menuItem){
                return $('#' + menuItem.attr('id') + '-frame');
            }
        });
        </pre>
        This is how the default frameLooup method is defined. Supposing the dynamic menu id is "dynamic-menu" the 
        frame lookup will attach the section content to the an element with id "dynamic-menu-frame". 
        This method can be used to setup the frame lookip depending on your needs.
    </p>

    <h4>Menu with package configuration: Setup your source code layout.</h4>
    <p>
        For the example show above all the files used by the menu were located in the website root directory but for
        more complex UI applications with many screens this is not ideal. A better solution would be to a folder for every
        section so we can keep them separated.
    </p>
    <p>
        In this example we want to setup the menu to store the files in packages with the menu element name.
        Inside every page we want to load the layout file stored in a file called 'main.html' and
        the setup file stored in a file call 'setup.js'.
    </p>
    <p>
        This is simple to do with nubDynamicMenu. We just have to provide a makeLayoutURI and makeSetupURI
        method to return the URI for the layout and setup files. 
        
        The menu configuration will be:
        The layout for the settings section is : <code>settings.html</code>
        <pre class="brush: javascript">
        $('#pkgs-dynamic-menu').nubDynamicMenu({
                    'frame' : {
                        'contentKeyRef' : '/data/contentKeyRef',
                        'makeLayoutURI' : function(key){
                            return key + '/main.html';
                        },
                        'makeSetupURI' : function(key){
                            return key + '/setup.js';
                        }
                    }
        });
        </pre>
    </p>
    <p>
        Then our file system layout will look something similar to:
         <pre class="brush: javascript">
            /root/
                index.html
                /main/
                    main.html
                    setup.js
                /setting/
                    settings.html
                    setup.js
                /logout/
                    main.html
                    setup.js
         </pre>
         As you can see the result source code layout is much well organised using this method, where we keep html and javascript
         code in different packages. To see more examples about nubDynamicMenu have a look to the tutorial section.
     </p>
     <br/>
</body>

</html>
